
- main_args params:
    - arch: ViT_B_16
    - batch_size: 128
    - num_samples: 1024

- weight params:
    - scheme: AbsMaxQuantizer
    - bit_width: 4
    - per_channel: True

- activation params:
    - scheme: MovAvgAbsMaxQuantizer
    - bit_width: 8
    - idadd_bit_width: 18
    - per_channel: False
    - momentum: 0.95
    - batches: 16
    - Identity addition : INT16 (The input of each LayerNorm)

- softmax params:
    - bit_width: 17
    - left_shift_for_exp: 15
    - act_quant_bit_width: 4
    - Activation of Softmax(Q@K/d_K) (attn_map) : UINT8

- layer_norm params:
    - using: True

- gelu params:
    - sigmoid_bit_width: 8
    - left_shift_for_exp: 23
    - act_quant_bit_width: 8

IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
IntSoftMax | output bit : 17, exp Lshift : 15
Int log_sqrt_2 quantizer | output bit : 4
IntGELU    | sigmoid bit: 8, exp Lshift: 23
Training model for calibration...
Activation calibration is done.

---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9932
x_int minmax : 0.0 65088.0
Percentage of values less than 2^8/2^16 : 43.23 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   6.,   8.,  11.,  15.,  22.,  32.,  45.,  63.,
         89., 127., 178., 253.], device='cuda:0')
    scalied ratio : 0.9921569228172302


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9826
x_int minmax : 0.0 64395.0
Percentage of values less than 2^8/2^16 : 52.92 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   6.,   8.,  11.,  15.,  22.,  32.,  44.,  62.,
         88., 125., 176., 251.], device='cuda:0')
    scalied ratio : 0.9843137860298157


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9924
x_int minmax : 0.0 65037.0
Percentage of values less than 2^8/2^16 : 68.01 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   6.,   8.,  11.,  15.,  22.,  32.,  44.,  63.,
         89., 127., 178., 253.], device='cuda:0')
    scalied ratio : 0.9921569228172302


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9857
x_int minmax : 0.0 64596.0
Percentage of values less than 2^8/2^16 : 67.56 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   6.,   8.,  11.,  15.,  22.,  32.,  44.,  62.,
         88., 126., 177., 251.], device='cuda:0')
    scalied ratio : 0.9843137860298157


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9124
x_int minmax : 0.0 59796.0
Percentage of values less than 2^8/2^16 : 70.00 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   5.,   8.,  10.,  14.,  20.,  29.,  41.,  58.,
         82., 116., 164., 233.], device='cuda:0')
    scalied ratio : 0.9137255549430847


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9465
x_int minmax : 0.0 62028.0
Percentage of values less than 2^8/2^16 : 66.33 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   5.,   8.,  11.,  15.,  21.,  31.,  42.,  60.,
         85., 121., 170., 241.], device='cuda:0')
    scalied ratio : 0.9450981020927429


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9408
x_int minmax : 0.0 61655.0
Percentage of values less than 2^8/2^16 : 67.98 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   5.,   8.,  11.,  14.,  21.,  30.,  42.,  59.,
         84., 120., 169., 240.], device='cuda:0')
    scalied ratio : 0.9411765336990356


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9740
x_int minmax : 0.0 63833.0
Percentage of values less than 2^8/2^16 : 67.50 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   5.,   8.,  11.,  15.,  22.,  31.,  44.,  61.,
         87., 124., 175., 248.], device='cuda:0')
    scalied ratio : 0.9725490808486938


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9614
x_int minmax : 0.0 63008.0
Percentage of values less than 2^8/2^16 : 63.36 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   5.,   8.,  11.,  15.,  22.,  31.,  43.,  61.,
         86., 123., 172., 245.], device='cuda:0')
    scalied ratio : 0.960784375667572


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.8792
x_int minmax : 0.0 57616.0
Percentage of values less than 2^8/2^16 : 56.87 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   2.,   4.,   5.,   7.,  10.,  14.,  20.,  28.,  39.,  55.,
         79., 112., 158., 224.], device='cuda:0')
    scalied ratio : 0.8784314393997192


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.7976
x_int minmax : 0.0 52273.0
Percentage of values less than 2^8/2^16 : 52.21 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 30
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 30
tensor([1.0000e+00, 2.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00, 1.1000e+01,
        1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01, 9.1000e+01,
        1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02, 7.2400e+02,
        1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03, 5.7930e+03,
        8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04, 4.6341e+04],
       device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   2.,   3.,   4.,   7.,   9.,  12.,  18.,  26.,  36.,  50.,
         72., 102., 143., 203.], device='cuda:0')
    scalied ratio : 0.7960785031318665


---------------------------------------------------------------
calib length : 512
x_hat minmax : 0.0 0.9199
x_int minmax : 0.0 60288.0
Percentage of values less than 2^8/2^16 : 52.75 % 
scaled x_int minmax : 0.0 65534.0
log quantized entries : 31
tensor([-155, -150, -145, -140, -135, -130, -125, -120, -115, -110, -105, -100,
         -95,  -90,  -85,  -80,  -75,  -70,  -65,  -60,  -55,  -50,  -45,  -40,
         -35,  -30,  -25,  -20,  -15,  -10,    0], device='cuda:0',
       dtype=torch.int32)
log dequantized entries : 31
tensor([1.0000e+00, 2.0000e+00, 3.0000e+00, 4.0000e+00, 6.0000e+00, 8.0000e+00,
        1.1000e+01, 1.6000e+01, 2.3000e+01, 3.2000e+01, 4.5000e+01, 6.4000e+01,
        9.1000e+01, 1.2800e+02, 1.8100e+02, 2.5600e+02, 3.6200e+02, 5.1200e+02,
        7.2400e+02, 1.0240e+03, 1.4480e+03, 2.0480e+03, 2.8960e+03, 4.0960e+03,
        5.7930e+03, 8.1920e+03, 1.1585e+04, 1.6384e+04, 2.3170e+04, 3.2768e+04,
        4.6341e+04], device='cuda:0')
[int8_map] : 16
tensor([  0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  16.,  23.,  32.,  45.,
         64.,  91., 128., 182.], device='cuda:0')

threshold : -80
    Domein : log -> UINT8 = -155 -> 182.0
    Domein : log -> UINT8 = -150 -> 128.0
    Domein : log -> UINT8 = -145 -> 91.0
    Domein : log -> UINT8 = -140 -> 64.0
    Domein : log -> UINT8 = -135 -> 45.0
    Domein : log -> UINT8 = -130 -> 32.0
    Domein : log -> UINT8 = -125 -> 23.0
    Domein : log -> UINT8 = -120 -> 16.0
    Domein : log -> UINT8 = -115 -> 11.0
    Domein : log -> UINT8 = -110 -> 8.0
    Domein : log -> UINT8 = -105 -> 6.0
    Domein : log -> UINT8 = -100 -> 4.0
    Domein : log -> UINT8 = -95 -> 3.0
    Domein : log -> UINT8 = -90 -> 2.0
    Domein : log -> UINT8 = -85 -> 1.0
    Domein : log -> UINT8 = 0 -> 0.0

    scalied map : tensor([  0.,   1.,   3.,   4.,   5.,   8.,  10.,  14.,  21.,  30.,  41.,  58.,
         82., 117., 165., 235.], device='cuda:0')
    scalied ratio : 0.9215686917304993



    Quantized model Evaluation accuracy on 50000 images, 71.006%, 89.666%
Total time: 902.44 sec



1 tensor(0, dtype=torch.int32) tensor(1, dtype=torch.int32)
2 tensor(10, dtype=torch.int32) tensor(2, dtype=torch.int32)
3 tensor(15, dtype=torch.int32) tensor(3, dtype=torch.int32)
4 tensor(20, dtype=torch.int32) tensor(4, dtype=torch.int32)
5 tensor(20, dtype=torch.int32) tensor(4, dtype=torch.int32)
6 tensor(25, dtype=torch.int32) tensor(6, dtype=torch.int32)
7 tensor(25, dtype=torch.int32) tensor(6, dtype=torch.int32)
8 tensor(30, dtype=torch.int32) tensor(8, dtype=torch.int32)
9 tensor(30, dtype=torch.int32) tensor(8, dtype=torch.int32)
10 tensor(30, dtype=torch.int32) tensor(8, dtype=torch.int32)
11 tensor(30, dtype=torch.int32) tensor(8, dtype=torch.int32)
12 tensor(35, dtype=torch.int32) tensor(12, dtype=torch.int32)
13 tensor(35, dtype=torch.int32) tensor(12, dtype=torch.int32)
14 tensor(35, dtype=torch.int32) tensor(12, dtype=torch.int32)
15 tensor(35, dtype=torch.int32) tensor(12, dtype=torch.int32)
16 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
17 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
18 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
19 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
20 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
21 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
22 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
23 tensor(40, dtype=torch.int32) tensor(16, dtype=torch.int32)
24 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
25 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
26 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
27 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
28 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
29 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
30 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
31 tensor(45, dtype=torch.int32) tensor(24, dtype=torch.int32)
32 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
33 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
34 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
35 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
36 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
37 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
38 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
39 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
40 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
41 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
42 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
43 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
44 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
45 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
46 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
47 tensor(50, dtype=torch.int32) tensor(32, dtype=torch.int32)
48 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
49 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
50 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
51 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
52 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
53 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
54 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
55 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
56 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
57 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
58 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
59 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
60 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
61 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
62 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
63 tensor(55, dtype=torch.int32) tensor(48, dtype=torch.int32)
64 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
65 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
66 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
67 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
68 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
69 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
70 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
71 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
72 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
73 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
74 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
75 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
76 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
77 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
78 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
79 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
80 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
81 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
82 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
83 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
84 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
85 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
86 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
87 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
88 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
89 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
90 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
91 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
92 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
93 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
94 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
95 tensor(60, dtype=torch.int32) tensor(64, dtype=torch.int32)
96 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
97 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
98 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
99 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
100 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
101 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
102 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
103 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
104 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
105 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
106 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
107 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
108 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
109 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
110 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
111 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
112 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
113 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
114 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
115 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
116 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
117 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
118 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
119 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
120 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
121 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
122 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
123 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
124 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
125 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
126 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
127 tensor(65, dtype=torch.int32) tensor(96, dtype=torch.int32)
128 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
129 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
130 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
131 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
132 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
133 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
134 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
135 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
136 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
137 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
138 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
139 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
140 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
141 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
142 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
143 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
144 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
145 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
146 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
147 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
148 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
149 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
150 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
151 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
152 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
153 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
154 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
155 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
156 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
157 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
158 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
159 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
160 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
161 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
162 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
163 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
164 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
165 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
166 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
167 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
168 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
169 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
170 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
171 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
172 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
173 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
174 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
175 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
176 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
177 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
178 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
179 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
180 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
181 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
182 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
183 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
184 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
185 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
186 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
187 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
188 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
189 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
190 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
191 tensor(70, dtype=torch.int32) tensor(128, dtype=torch.int32)
192 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
193 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
194 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
195 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
196 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
197 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
198 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
199 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
200 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
201 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
202 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
203 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
204 tensor(75, dtype=torch.int32) tensor(192, dtype=torch.int32)
